{"version":3,"sources":["firebase.js","PuzzleInput.js","DisplayPuzzles.js","App.js","serviceWorker.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","dbRef","database","ref","PuzzleInput","handleChange","event","setState","target","name","value","handleClick","preventDefault","push","state","riddleInput","answerInput","counter","action","className","htmlFor","type","id","onChange","this","placeholder","onClick","Component","DisplayPuzzle","saveRiddleAnswer","userInputAnswer","console","log","checkUserInputAnswer","dbAnswer","userAnswer","userFeedback","dbReturn","on","snapshot","dbObject","val","newReturnedArray","propertyName","map","item","App","onPuzzleDisplay","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.e743baa2.chunk.js","sourcesContent":["import firebase from \"firebase/app\";\nimport \"firebase/database\"\n\nconst firebaseConfig = {\n    apiKey: \"AIzaSyDvQF-5yo3RckCip07OjF35Ht7-GD9JU9k\",\n    authDomain: \"anonpuzzleboard.firebaseapp.com\",\n    databaseURL: \"https://anonpuzzleboard.firebaseio.com\",\n    projectId: \"anonpuzzleboard\",\n    storageBucket: \"anonpuzzleboard.appspot.com\",\n    messagingSenderId: \"520968649938\",\n    appId: \"1:520968649938:web:59905411bf7834845e410b\"\n};\n// Initialize Firebase\nfirebase.initializeApp(firebaseConfig);\n\nexport default firebase ","import React, { Component } from 'react'\nimport firebase from \"./firebase\";\nconst dbRef = firebase.database().ref()\n\n\nclass PuzzleInput extends Component {\n    constructor() {\n        super()\n        this.state = {\n            riddleInput: '',\n            answerInput: '',\n            counter: 0,\n        }\n    }\n\n    handleChange = (event) => {\n        this.setState({\n            [event.target.name]: event.target.value\n        })\n    }\n\n    handleClick = (event) => {\n        event.preventDefault()\n        dbRef.push(\n            [this.state.riddleInput, this.state.answerInput, this.state.counter]\n        )\n        this.setState({\n            riddleInput: '',\n            answerInput: '',\n            counter: 0,\n        })\n    }\n    render() {\n        return (\n         <form action = \"submit\" >\n        <h1>Puzzle Input</h1>\n        <div className=\"riddleArea\">\n            <label htmlFor=\"riddleInput\">Please input your riddle</label>\n            <input type=\"textarea\" id=\"riddleInput\" onChange={this.handleChange} name=\"riddleInput\" value={this.state.riddleInput} placeholder=\"I am round and I live underground\" />\n        </div>\n        <div className=\"answerArea\">\n            <label htmlFor=\"answerInput\">Please input your answer</label>\n            <input type=\"text\" name=\"answerInput\" id=\"answerInput\" placeholder=\"potato\" onChange={this.handleChange} value={this.state.answerInput} />\n        </div>\n        <button onClick={this.handleClick}>Submit</button>\n        </form >\n        )\n    }\n}\n\nexport default PuzzleInput\n","import React, {Component} from \"react\"\nimport firebase from \"./firebase\"\nconst dbRef = firebase.database().ref()\n\n// got it to display the text but now the text displays on ALL the entries in addition to that it is constant so need a way to clear it\n\nclass DisplayPuzzle extends Component {\n    constructor(){\n        super()\n        this.state = {\n            dbReturn: [],\n            userInputAnswer: \"\",\n            userFeedback: \"Right\",\n        }\n        console.log(this.state.userFeedback, \"this is the userFeedback\")\n    }\n\n    componentDidMount() {\n        dbRef.on('value', (snapshot) => {\n            const dbObject = snapshot.val()\n            const newReturnedArray = []\n            for (let propertyName in dbObject) {\n                newReturnedArray.push(dbObject[propertyName])\n            }\n            console.log(newReturnedArray)\n            this.setState({\n                dbReturn: newReturnedArray\n            }) \n            console.log(this.state.dbReturn, \"this is my dbReturn\")\n        })\n    }\n    \n    saveRiddleAnswer = (event) =>{\n        this.setState({\n            userInputAnswer: event.target.value\n        })\n        console.log(this.state.userInputAnswer, \"this is the state of userInputUserInputAnswer\")\n    }\n\n    checkUserInputAnswer = (event) => {\n        event.preventDefault()\n        const dbAnswer = event.target.value\n        const userAnswer = this.state.userInputAnswer\n        userAnswer === dbAnswer \n            ? this.setState({\n                userFeedback: \"You got it right\"\n            }) \n            : this.setState({\n                userFeedback: \"You got it wrong\"\n            })\n            console.log(userAnswer, \"this is the user answer\")\n            console.log(dbAnswer, \"This is the right answer from the database\")\n           \n    }\n\n    \n    \n    render() {\n        // later if you want to add counter put the display here\n        return(\n            <div className=\"displayBox\">\n                <h1>Anonymous Puzzle Board</h1>\n                <ul>\n                    <li>\n                        {this.state.dbReturn.map(item => {\n                            return <form action=\"submit\">\n                                <p>{item[0]}</p>\n                                <input type=\"text\" id=\"riddleAnswer\" onChange={this.saveRiddleAnswer} placeholder=\"Answer\" />\n                                <button value={item[1]} onClick={this.checkUserInputAnswer}>Submit</button>\n                                <p>{this.state.userFeedback}</p>\n                                {console.log(this.state.userFeedback, \"This is the userFeedback\")}\n                            </form>\n                        })}  \n                    </li>\n                </ul>\n            </div>\n           \n        )\n    }\n}\n\nexport default DisplayPuzzle ","import React, { Component } from 'react';\nimport './App.css';\nimport firebase from \"./firebase\";\nimport PuzzleInput from \"./PuzzleInput\"\nimport DisplayPizzles from \"./DisplayPuzzles\"\n\n// global variables\nconst dbRef = firebase.database().ref()\n\nclass App extends Component {\n  constructor () {\n    super() \n    this.state = {\n      dbReturn: [],\n      onPuzzleDisplay: true\n    }\n  }\n  \n\n  render() {\n    return (\n     \n      <div className=\"App\">\n        <PuzzleInput />\n        <DisplayPizzles />\n      </div>\n    )\n  }\n\n  \n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}