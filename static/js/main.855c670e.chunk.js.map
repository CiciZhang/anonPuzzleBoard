{"version":3,"sources":["firebase.js","PuzzleInput.js","Modal.js","DisplayPuzzles.js","App.js","serviceWorker.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","PuzzleInput","handleChange","event","target","value","length","alert","setState","name","handleClick","dbRef","database","ref","preventDefault","dateToString","Date","toDateString","submissionTime","state","riddleInput","answerInput","push","action","className","htmlFor","type","id","onChange","this","placeholder","onClick","Component","Modal","toggleModal","document","querySelector","classList","toggle","deletePuzzle","riddleID","child","remove","props","answerDisplay","answerBool","DisplayPuzzle","errorCheck","param","saveRiddleAnswer","userInputAnswer","checkUserInputAnswer","dbAnswer","userAnswer","userFeedback","dbReturn","on","snapshot","dbObject","val","newReturnedArray","propertyName","riddleObject","riddleInfo","map","key","App","changeDisplay","displayState","puzzleDisplayOn","DisplayPuzzles","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.855c670e.chunk.js","sourcesContent":["import firebase from \"firebase/app\";\nimport \"firebase/database\"\n\nconst firebaseConfig = {\n    apiKey: \"AIzaSyDvQF-5yo3RckCip07OjF35Ht7-GD9JU9k\",\n    authDomain: \"anonpuzzleboard.firebaseapp.com\",\n    databaseURL: \"https://anonpuzzleboard.firebaseio.com\",\n    projectId: \"anonpuzzleboard\",\n    storageBucket: \"anonpuzzleboard.appspot.com\",\n    messagingSenderId: \"520968649938\",\n    appId: \"1:520968649938:web:59905411bf7834845e410b\"\n};\n// Initialize Firebase\nfirebase.initializeApp(firebaseConfig);\n\nexport default firebase ","import React, { Component } from 'react'\nimport firebase from \"./firebase\";\n\n\nclass PuzzleInput extends Component {\n    constructor() {\n        super()\n        this.state = {\n            riddleInput: '',\n            answerInput: '',\n            submissionTime: '',\n        }\n    }\n\n    handleChange = (event) => {\n         if(event.target.value.length > 200){\n           return alert(\"You're putting in too much!\")\n        } else {\n        this.setState({\n            [event.target.name]: event.target.value\n        })}\n    }\n\n    handleClick = (event) => {\n        const dbRef = firebase.database().ref()\n        event.preventDefault()\n        let dateOfSubmission = new Date()\n        const dateToString = dateOfSubmission.toDateString()\n        this.setState({\n            submissionTime: dateToString\n        }, ()=> {   \n                if (this.state.riddleInput.length === 0 || this.state.answerInput.length === 0) {\n                    return alert(\"Please give me something!\")\n                } else {\n                    dbRef.push(\n                        [this.state.riddleInput, this.state.answerInput, this.state.submissionTime])\n                }\n                this.setState({\n                    riddleInput: '',\n                    answerInput: '',\n                })\n        })\n    }\n\n    render() {\n        return (\n         <form action = \"submit\" >\n            <div className=\"riddleArea\">\n                <label htmlFor=\"riddleInput\">Please input your puzzle</label>\n                <input type=\"textarea\" id=\"riddleInput\" onChange={this.handleChange} name=\"riddleInput\" value={this.state.riddleInput} placeholder=\"I am round and I live underground\" />\n            </div>\n            <div className=\"answerArea\">\n                <label htmlFor=\"answerInput\">Please input your answer</label>\n                <input type=\"text\" name=\"answerInput\" id=\"answerInput\" placeholder=\"potato\" onChange={this.handleChange} value={this.state.answerInput} />\n            </div>\n            <button onClick={this.handleClick}>Submit</button>\n        </form >\n        )\n    }\n}\n\nexport default PuzzleInput\n","import React, {Component} from \"react\";\nimport firebase from \"./firebase\";\n\n// Modal referenced from https://sabe.io/tutorials/how-to-create-modal-popup-box but changed to work with react\n\nclass Modal extends Component {\n\n    toggleModal = () => {\n        const modal = document.querySelector(\".modal\");\n        modal.classList.toggle(\"show-modal\");\n    } \n\n    deletePuzzle = (riddleID) => {\n        const dbRef = firebase.database().ref()\n        dbRef.child(riddleID).remove()\n    }\n\n    render(){\n        return (\n            <div className=\"modal\" >\n                <div className=\"modal-content\">\n                    <span className=\"close-button\" onClick={this.toggleModal}>X</span>\n                    <h2>{this.props.answerDisplay}</h2>  \n                    {this.props.answerBool\n                    ? <button className=\"deleteButton\" onClick={() => { this.deletePuzzle(this.props.riddleID) }}>Delete This Question</button>\n                    : <div></div>}\n                </div>\n            </div>\n        )\n    }\n}\n    \n\nexport default Modal","import React, {Component} from \"react\";\nimport firebase from \"./firebase\";\nimport Modal from \"./Modal\";\n\n\nclass DisplayPuzzle extends Component {\n    constructor(){\n        super()\n        this.state = {\n            dbReturn: [],\n            userInputAnswer: \"BLANK\",\n            userFeedback: \"\",\n            answerBool: false\n        }\n    }\n\n    componentDidMount() {\n        const dbRef = firebase.database().ref()\n        dbRef.on('value', (snapshot) => {\n            const dbObject = snapshot.val()\n            const newReturnedArray = []\n            for (let propertyName in dbObject) {\n                const riddleObject = {\n                    id: propertyName,\n                    riddleInfo: dbObject[propertyName]\n                }\n                newReturnedArray.push(riddleObject)\n            }\n            this.setState({\n                dbReturn: newReturnedArray,\n            }) \n        })\n    }\n\n    errorCheck = (param) => {\n        if (param.length === 0) {\n            alert(\"Come on, give me an INPUT\")\n        }\n        else if (param.length > 200) {\n            alert(\"Input too long!\")\n        }\n    }\n\n    saveRiddleAnswer = (event) =>{\n        event.target.value.length > 200\n        ?this.setState({\n            userInputAnswer: \"this long\"\n            })\n        :event.target.value.length === 0\n        ? this.setState({\n            userInputAnswer: \"BLANK\"\n        })\n        :\n        this.setState({\n            userInputAnswer: event.target.value,\n        })\n    }\n\n    checkUserInputAnswer = (event) => {\n        event.preventDefault()\n        const dbAnswer = event.target.value\n        const userAnswer = this.state.userInputAnswer\n        userAnswer === dbAnswer \n            ? this.setState({\n                userFeedback: `You got it right! The answer is ${dbAnswer}`,\n                answerBool: true,\n            }) \n            : this.setState({\n                userFeedback: `The answer is not ${userAnswer} please try again.`,\n                answerBool: false,\n            })\n        this.toggleModal()\n    }\n\n\n    toggleModal = () => {\n    const modal = document.querySelector(\".modal\");\n    modal.classList.toggle(\"show-modal\");\n    } \n\n\n    render() {\n        return(\n            <main className=\"background\">\n                \n                <ul>\n                    \n                    {\n                        this.state.dbReturn.map((riddleObject) => {\n                            return (\n                                <li key={riddleObject.id}>\n                                    <Modal answerDisplay={this.state.userFeedback} riddleID={riddleObject.id}\n                                    answerBool={this.state.answerBool} toggleModal={()=>this.toggleModal}></Modal>\n                                    <form action=\"submit\">\n                                        <p className =\"dateDisplay\">Submitted on: {riddleObject.riddleInfo[2]}</p>\n                                        <div className=\"textBox\">\n                                            <p>{riddleObject.riddleInfo[0]}</p>\n                                        </div>\n                                        <input type=\"text\" id=\"riddleAnswer\" onChange={this.saveRiddleAnswer} placeholder=\"Answer\" />\n                                        <button value={riddleObject.riddleInfo[1]} onClick={this.checkUserInputAnswer}>Submit</button>\n                                    </form>\n                                </li>)\n                        })\n                    }\n                </ul>\n            </main>\n        )\n    }\n}\n            \n\nexport default DisplayPuzzle ","import React, { Component } from 'react';\nimport './App.scss';\nimport PuzzleInput from \"./PuzzleInput\";\nimport DisplayPuzzles from \"./DisplayPuzzles\";\n\nclass App extends Component {\n  constructor () {\n    super() \n    this.state = {\n      dbReturn: [],\n      puzzleDisplayOn: true\n    }\n  }\n  \nchangeDisplay = () =>{\n  const displayState = this.state.puzzleDisplayOn\n  this.setState({\n    puzzleDisplayOn: !displayState\n  })\n}\n\n  render() {\n    return (\n      <div className=\"app\">\n        {this.state.puzzleDisplayOn \n        ?<div>\n          <header>\n              <h1>Anonymous Puzzle Board</h1>\n              <h2>Can you solve it?</h2>\n              <button onClick={this.changeDisplay}>Puzzle Submission</button> \n          </header>\n          <DisplayPuzzles /> \n        </div>\n        : <div>\n          <header className=\"puzzInput\">\n            <h1 >Puzzle Input</h1>\n            <h2>Submit your puzzle in the space below</h2>\n            <button onClick={this.changeDisplay}>Go Back</button>\n          </header>\n            <div className=\"formDiv\">\n            <PuzzleInput />\n            \n            </div>\n          </div>}\n      </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}